@page "/SamplePages/Basics"

<PageTitle>Review page basics</PageTitle>

<MudText Typo="Typo.h3" Align="Align.Center">Introduction to Blazor Page (Review)</MudText>

@{
    //Comments in Razor can be like this in a @{ } to use //
}

<!--
    Or comments can be like this within these "arrows"
-->
@{
    // Blazor Components Combine C# and HTML in a single file
    // The '@' symbol is used to switch between HTML to C#
    // When using '@', you are in the C# environment, allowing for C# code execution
    // Without '@' you are in the HTML environment, where you can write standard HTML
}
<MudCard Elevation="4" Class="mt-2">
    <MudCardHeader>
        <MudText Typo="Typo.h5">Demonstration of using Methods</MudText>
    </MudCardHeader>
    <MudCardContent>
        <!--Conditionally display content based on if the oddEvenValue is Even or Odd-->
        @if (IsEven)
        {
            <!--
                Display a message if the value is even
                injects the MY_NAME constant and oddEvenValue field
                into the HTML using the 'at' symbol
            -->
            <p>@MY_NAME is even (value: @oddEvenValue)</p>
        }
        else
        {
            <!--Display a different messasge is the value is odd-->
            <p>The random number is odd (value: @oddEvenValue)</p>
        }
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="RandomValue">
            Random Number
        </MudButton>
    </MudCardActions>
</MudCard>

<MudGrid Spacing="6"
         Class="mt-4">
    <MudItem xs="12" sm="6" md="4">
        <MudForm @ref="textForm">
            <!-- Heading for this Section -->
            <MudText Typo="Typo.h5">Text Boxes</MudText>
            <!-- Using MudBlazor label and input to enter an email -->
            <MudTextField Label="Enter an Email"
                          @bind-Value="emailText"
                          Required
                          RequiredError="Email is most definetly needed!"
                          InputType="InputType.Email"
                          Variant="Variant.Outlined"/>
            <!-- Using MudBlazor label and input to enter a password -->
            <MudTextField Label="Enter a Password"
                          @bind-Value="passwordText"
                          Required
                          RequiredError="Password is most definetly needed!"
                          InputType="InputType.Password"
                          Variant="Variant.Outlined"/>
            <!-- Using MudBlazor label and input to enter a date
                    DO NOT TRY AND @bind-Value, this will screw up!
                    always use @bind-Date for DatePickers
            -->
            <MudDatePicker Label="Enter a Date"
                           @bind-Date="dateText"
                           Variant="Variant.Outlined"
                           Validation="@(new Func<string, string>(ValidateDate))" />
            <!-- Button to trigger the TextSubmit Method -->
            <MudButton OnClick="TextSubmit"
                       Variant="Variant.Outlined"
                       Color="Color.Tertiary">
                Text Submit
            </MudButton>
            <MudButton OnClick="@(() => textForm.Validate())"
                       Variant="Variant.Outlined"
                       Color="Color.Info">
                Validate Text
            </MudButton>
        </MudForm>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudText Typo="Typo.h5">Radio buttons, Checkbox, Text Area</MudText>
        <MudRadioGroup @bind-Value="mealMicrosoft">
            <MudText Typo="Typo.h6">Select your favourite meal (MudBlazor): </MudText>
            <!-- Note: Name in the InputRadioGroup and InputRadio items must match -->
            @foreach (var meal in meals)
            {
                <br />
                <MudRadio Value="@meal">@meal</MudRadio>
            }
        </MudRadioGroup>
        <MudCheckBox @bind-Value="acceptanceBox"
                     Color="Color.Primary"
                     Label="I accept the terms of service" />
        <MudTextField Label="Enter a message"
                      Variant="Variant.Outlined"
                      @bind-Value="messageBody"
                      Lines="5" />
        <MudButton OnClick="RadioCheckAreaSubmit"
                   Variant="Variant.Filled"
                   Color="Color.Primary">
            Radio/Check/Area Submit
        </MudButton>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudText Typo="Typo.h5">List and Slider</MudText>
        <!-- Display a label for the dropdown -->
        <MudSelect Label="Select a ride"
                   Variant="Variant.Outlined"
                   @bind-Value="myRide"
                   Placeholder="Select ride..."
                   Clearable
                   Required
                   RequiredError="Ride selection is required">
            @foreach (var item in rides)
            {
                <!--
                    Use the .Key for the dictionary as the value as it is an int
                    Use the .Value to display the string value from the dictionary
                    REMEMBER TO SPECIFY THE T (type) of the MudSelectItem when using 
                    a nullable value to bind.
                    For example: the T="int?" is used to specify that the value can be null
                -->
                <MudSelectItem T="int?" Value="@item.Key">@item.Value</MudSelectItem>
            }
        </MudSelect>
        <MudSelect Label="Select Vacation Spots"
                   @bind-SelectedValues="selectedVacationSpots"
                   @bind-Value="vacationSpot"
                   Variant="Variant.Outlined"
                   MultiSelection="true"
                   Clearable
                   Required
                   RequiredError="You must select at least one vacation spot"
                   Placeholder="Select Vacation Spots">
            @foreach(var item in vacationSpots)
            {
                <MudSelectItem Value="@item">@item</MudSelectItem>
            }
        </MudSelect>
        <MudSlider @bind-Value="reviewRating"
                   Min="0"
                   Max="10"
                   Step="1">
            Rate the form control review (0 = bad, 10 = good)
        </MudSlider>
        <MudText Typo="Typo.body2"><strong>Rating: </strong>@reviewRating</MudText>
        <MudButton OnClick="ListSliderSubmit"
                   Variant="Variant.Filled">
            List/Slider Submit
        </MudButton>
    </MudItem>
</MudGrid>
<div class="mt-2 mx-auto">
    <h2>@feedback</h2>
</div>